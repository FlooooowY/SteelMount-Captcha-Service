version: '3.8'
name: captcha-service

services:
  balancer:
    build:
      context: .
      dockerfile: Dockerfile.balancer
    ports:
      - '50051:50051'
    environment:
      - BALANCER_PORT=50051
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'grpc_health_probe', '-addr=localhost:50051']
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    stop_grace_period: 10s
    mem_limit: 256m
    cpus: 0.25

  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    command: redis-server --appendonly yes --save 60 1000 --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 2s
      retries: 2
      start_period: 3s
    stop_grace_period: 5s
    mem_limit: 512m
    cpus: 0.5

  captcha-service:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '9090:9090'
      - '38000-40000:38000-40000'
    environment:
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=info
      - METRICS_PORT=9090
      - MIN_PORT=38000
      - MAX_PORT=40000
      - FIXED_METRICS_PORT=true
      - GOMEMLIMIT=512MiB
      - GOGC=100
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:9090/health',
        ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    stop_grace_period: 10s
    mem_limit: 1024m
    cpus: 1.0

  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9091:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=24h'
      - '--storage.tsdb.retention.size=1GB'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.wal-compression'
      - '--query.max-concurrency=4'
    restart: unless-stopped
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--quiet',
          '--tries=1',
          '--spider',
          'http://localhost:9090/-/healthy',
        ]
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 10s
    stop_grace_period: 10s
    mem_limit: 512m
    cpus: 0.5

  grafana:
    image: grafana/grafana:latest
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123!}
      - GF_INSTALL_PLUGINS=
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/api/health || exit 1']
      interval: 15s
      timeout: 5s
      retries: 2
      start_period: 10s
    stop_grace_period: 5s
    mem_limit: 256m
    cpus: 0.25

volumes:
  prometheus_data:
  grafana_data:
