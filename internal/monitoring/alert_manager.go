package monitoring

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"sync"
	"time"
)

// AlertLevel –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–∞
type AlertLevel string

const (
	AlertLevelInfo     AlertLevel = "INFO"
	AlertLevelWarning  AlertLevel = "WARNING"
	AlertLevelCritical AlertLevel = "CRITICAL"
)

// Alert –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
type Alert struct {
	ID          string                 `json:"id"`
	Level       AlertLevel             `json:"level"`
	Title       string                 `json:"title"`
	Description string                 `json:"description"`
	Source      string                 `json:"source"`
	Data        map[string]interface{} `json:"data"`
	Timestamp   time.Time              `json:"timestamp"`
	Resolved    bool                   `json:"resolved"`
}

// AlertRule –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
type AlertRule struct {
	ID          string
	Name        string
	Description string
	Level       AlertLevel
	Condition   func(data map[string]interface{}) bool
	Cooldown    time.Duration // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∞–ª–µ—Ä—Ç–∞–º–∏
	LastFired   time.Time
}

// AlertChannel –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
type AlertChannel interface {
	SendAlert(ctx context.Context, alert Alert) error
	GetName() string
}

// AlertManager —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–æ–π –∞–ª–µ—Ä—Ç–æ–≤
type AlertManager struct {
	rules    map[string]*AlertRule
	channels []AlertChannel
	alerts   []Alert
	mutex    sync.RWMutex
	
	// –ú–µ—Ç—Ä–∏–∫–∏
	totalAlerts     int64
	alertsByLevel   map[AlertLevel]int64
	alertsBySource  map[string]int64
}

// NewAlertManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤
func NewAlertManager() *AlertManager {
	am := &AlertManager{
		rules:           make(map[string]*AlertRule),
		channels:        make([]AlertChannel, 0),
		alerts:          make([]Alert, 0),
		alertsByLevel:   make(map[AlertLevel]int64),
		alertsBySource:  make(map[string]int64),
	}
	
	// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	am.addDefaultSecurityRules()
	
	return am
}

// AddRule –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –∞–ª–µ—Ä—Ç–∞
func (am *AlertManager) AddRule(rule *AlertRule) {
	am.mutex.Lock()
	defer am.mutex.Unlock()
	
	am.rules[rule.ID] = rule
}

// AddChannel –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
func (am *AlertManager) AddChannel(channel AlertChannel) {
	am.mutex.Lock()
	defer am.mutex.Unlock()
	
	am.channels = append(am.channels, channel)
}

// ProcessEvent –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –∞–ª–µ—Ä—Ç–æ–≤
func (am *AlertManager) ProcessEvent(source string, data map[string]interface{}) {
	am.mutex.Lock()
	defer am.mutex.Unlock()
	
	now := time.Now()
	
	for _, rule := range am.rules {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
		if now.Sub(rule.LastFired) < rule.Cooldown {
			continue
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
		if rule.Condition(data) {
			alert := Alert{
				ID:          fmt.Sprintf("%s_%d", rule.ID, now.UnixNano()),
				Level:       rule.Level,
				Title:       rule.Name,
				Description: rule.Description,
				Source:      source,
				Data:        data,
				Timestamp:   now,
				Resolved:    false,
			}
			
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç
			am.sendAlert(alert)
			
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
			rule.LastFired = now
			am.totalAlerts++
			am.alertsByLevel[rule.Level]++
			am.alertsBySource[source]++
			
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–µ—Ä—Ç
			am.alerts = append(am.alerts, alert)
			
			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
			if len(am.alerts) > 1000 {
				am.alerts = am.alerts[len(am.alerts)-1000:]
			}
		}
	}
}

// sendAlert –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç —á–µ—Ä–µ–∑ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
func (am *AlertManager) sendAlert(alert Alert) {
	ctx := context.Background()
	
	for _, channel := range am.channels {
		go func(ch AlertChannel, a Alert) {
			if err := ch.SendAlert(ctx, a); err != nil {
				log.Printf("Failed to send alert via %s: %v", ch.GetName(), err)
			}
		}(channel, alert)
	}
}

// GetAlerts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã
func (am *AlertManager) GetAlerts(limit int) []Alert {
	am.mutex.RLock()
	defer am.mutex.RUnlock()
	
	if limit <= 0 || limit > len(am.alerts) {
		limit = len(am.alerts)
	}
	
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã
	start := len(am.alerts) - limit
	if start < 0 {
		start = 0
	}
	
	result := make([]Alert, limit)
	copy(result, am.alerts[start:])
	
	return result
}

// GetStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–ª–µ—Ä—Ç–æ–≤
func (am *AlertManager) GetStats() map[string]interface{} {
	am.mutex.RLock()
	defer am.mutex.RUnlock()
	
	return map[string]interface{}{
		"total_alerts":      am.totalAlerts,
		"alerts_by_level":   am.alertsByLevel,
		"alerts_by_source":  am.alertsBySource,
		"active_rules":      len(am.rules),
		"active_channels":   len(am.channels),
		"recent_alerts":     len(am.alerts),
	}
}

// addDefaultSecurityRules –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func (am *AlertManager) addDefaultSecurityRules() {
	// –ü—Ä–∞–≤–∏–ª–æ: –í—ã—Å–æ–∫–∏–π RPS —Å –æ–¥–Ω–æ–≥–æ IP
	am.AddRule(&AlertRule{
		ID:          "high_rps_single_ip",
		Name:        "–í—ã—Å–æ–∫–∏–π RPS —Å –æ–¥–Ω–æ–≥–æ IP",
		Description: "–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞",
		Level:       AlertLevelWarning,
		Cooldown:    time.Minute * 5,
		Condition: func(data map[string]interface{}) bool {
			if rps, ok := data["rps_per_ip"].(float64); ok {
				return rps > 50 // –ë–æ–ª—å—à–µ 50 RPS —Å –æ–¥–Ω–æ–≥–æ IP
			}
			return false
		},
	})
	
	// –ü—Ä–∞–≤–∏–ª–æ: –ú–∞—Å—Å–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP
	am.AddRule(&AlertRule{
		ID:          "mass_ip_blocking",
		Name:        "–ú–∞—Å—Å–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP",
		Description: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–∞—Å—Å–æ–≤–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∞–¥—Ä–µ—Å–æ–≤",
		Level:       AlertLevelCritical,
		Cooldown:    time.Minute * 10,
		Condition: func(data map[string]interface{}) bool {
			if blockedIPs, ok := data["blocked_ips_count"].(int); ok {
				return blockedIPs > 100 // –ë–æ–ª—å—à–µ 100 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IP
			}
			return false
		},
	})
	
	// –ü—Ä–∞–≤–∏–ª–æ: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–æ—Ç–æ–≤
	am.AddRule(&AlertRule{
		ID:          "high_bot_percentage",
		Name:        "–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –±–æ—Ç–æ–≤",
		Description: "–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç bot —Ç—Ä–∞—Ñ–∏–∫–∞",
		Level:       AlertLevelWarning,
		Cooldown:    time.Minute * 5,
		Condition: func(data map[string]interface{}) bool {
			if botPercent, ok := data["bot_percentage"].(float64); ok {
				return botPercent > 30.0 // –ë–æ–ª—å—à–µ 30% bot —Ç—Ä–∞—Ñ–∏–∫–∞
			}
			return false
		},
	})
	
	// –ü—Ä–∞–≤–∏–ª–æ: –ê–Ω–æ–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á
	am.AddRule(&AlertRule{
		ID:          "fast_captcha_solving",
		Name:        "–ê–Ω–æ–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á",
		Description: "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∫–∞–ø—á",
		Level:       AlertLevelWarning,
		Cooldown:    time.Minute * 3,
		Condition: func(data map[string]interface{}) bool {
			if avgTime, ok := data["avg_solve_time_ms"].(float64); ok {
				return avgTime < 1000 // –ú–µ–Ω—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Ä–µ—à–µ–Ω–∏–µ
			}
			return false
		},
	})
	
	// –ü—Ä–∞–≤–∏–ª–æ: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
	am.AddRule(&AlertRule{
		ID:          "high_failure_rate",
		Name:        "–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫",
		Description: "–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á",
		Level:       AlertLevelInfo,
		Cooldown:    time.Minute * 5,
		Condition: func(data map[string]interface{}) bool {
			if failureRate, ok := data["failure_rate"].(float64); ok {
				return failureRate > 80.0 // –ë–æ–ª—å—à–µ 80% –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
			}
			return false
		},
	})
	
	// –ü—Ä–∞–≤–∏–ª–æ: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
	am.AddRule(&AlertRule{
		ID:          "suspicious_geo_pattern",
		Name:        "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã",
		Description: "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤",
		Level:       AlertLevelWarning,
		Cooldown:    time.Minute * 10,
		Condition: func(data map[string]interface{}) bool {
			if countries, ok := data["unique_countries"].(int); ok {
				if totalRequests, ok := data["total_requests"].(int); ok {
					// –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ –æ—á–µ–Ω—å –º–Ω–æ–≥–∏—Ö —Å—Ç—Ä–∞–Ω –ø—Ä–∏ –Ω–µ–±–æ–ª—å—à–æ–º –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
					return countries > 50 && totalRequests < 1000
				}
			}
			return false
		},
	})
}

// LogChannel - –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤
type LogChannel struct {
	name string
}

// NewLogChannel —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func NewLogChannel() *LogChannel {
	return &LogChannel{name: "log"}
}

func (lc *LogChannel) SendAlert(ctx context.Context, alert Alert) error {
	alertJSON, _ := json.MarshalIndent(alert, "", "  ")
	log.Printf("üö® SECURITY ALERT [%s]: %s\n%s", alert.Level, alert.Title, string(alertJSON))
	return nil
}

func (lc *LogChannel) GetName() string {
	return lc.name
}

// WebhookChannel - –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ webhook
type WebhookChannel struct {
	name string
	url  string
}

// NewWebhookChannel —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π webhook –∫–∞–Ω–∞–ª
func NewWebhookChannel(name, url string) *WebhookChannel {
	return &WebhookChannel{
		name: name,
		url:  url,
	}
}

func (wc *WebhookChannel) SendAlert(ctx context.Context, alert Alert) error {
	// –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã HTTP –∑–∞–ø—Ä–æ—Å –∫ webhook URL
	log.Printf("üì° Webhook [%s]: –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ %s –Ω–∞ %s", wc.name, alert.ID, wc.url)
	return nil
}

func (wc *WebhookChannel) GetName() string {
	return wc.name
}

